name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }} 

jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
        options: --name mongo
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
      NODE_OPTIONS: --no-deprecation
    strategy:
      matrix:
        nodejs_version: [18, 20]
        operating_system: [ubuntu-latest]
    runs-on: ${{ matrix.operating_system }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm ci

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

  reports-s3:
    name: AWS S3 - Upload Reports
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Upload to AWS S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: solar-system-reports-bucket
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'                       

  docker:
    name: Build & Push Docker Image
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Docker Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} .
          docker tag ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

      - name: Push Docker Image
        run: |
          docker push ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

  update-manifests:
    name: Update Kubernetes Manifests
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Update Image in Development Deployment
        run: |
          sed -i 's|image: .*|image: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}|' solar-system/kubernetes/development/deployment.yaml

      - name: Update Image in Production Deployment
        run: |
          sed -i 's|image: .*|image: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}|' solar-system/kubernetes/production/deployment.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add solar-system/kubernetes/development/deployment.yaml solar-system/kubernetes/production/deployment.yaml
          git commit -m "Update deployment image to ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}"
          git push origin ${{ github.ref_name }}

  # deploy-argocd:
  #   name: Deploy via ArgoCD
  #   needs: update-manifests
  #   runs-on: [self-hosted, linux, prod]
  #   steps:
  #     - name: Login to ArgoCD
  #       run: |
  #         argocd login ${{ secrets.ARGOCD_SERVER }} --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

  #     - name: Sync Development Environment
  #       if: contains(github.ref, 'feature/')
  #       run: |
  #         argocd app sync solar-system-dev --revision ${{ github.sha }}
  #         argocd app wait solar-system-dev --health --timeout 300

  #     - name: Sync Production Environment
  #       if: github.ref == 'refs/heads/main'
  #       run: |
  #         argocd app sync solar-system-prod --revision ${{ github.sha }}
  #         argocd app wait solar-system-prod --health --timeout 300
