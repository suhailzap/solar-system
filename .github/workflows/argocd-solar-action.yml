name: ArgoCd Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/argocd-workflows'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }} 

jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
        options: --name mongo
    env:
        MONGO_URI: 'mongodb://localhost:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
        NODE_OPTIONS: --no-deprecation
    strategy:
      matrix:
        nodejs_version: [18, 20]
        operating_system: [ubuntu-latest]
        exclude:
          - nodejs_version: 18
            operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.nodejs_version }}

    - name: Composit Action - Cache & Install NPM Packages
      uses: ./.github/custom-actions/npm-action
      with:
        path-of-folder: 'node_modules'

    - name: Run Unit Tests
      run: npm test | tee test-results-${{ matrix.nodejs_version }}-${{ matrix.operating_system }}.xml
    - name: Ensure Test Results Directory Exists
      run: mkdir -p test-results
    - name: Move Test Results
      run: mv test-results-${{ matrix.nodejs_version }}-${{ matrix.operating_system }}.xml test-results/
    - name: Archive Test Results
      uses: actions/upload-artifact@v4
      with:
        name: Mocha-Test-Result-${{ matrix.nodejs_version }}-${{ matrix.operating_system }}-${{ github.run_id }}
        path: test-results/
        if-no-files-found: ignore

  code-coverage:
    name: Code Coverage
    container:
      image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options: --name mongo
    env:
        MONGO_URI: 'mongodb://mongo:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
        NODE_OPTIONS: --no-deprecation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # - name: Setup NodeJS - 18
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: 18

    - name: Composit Action - Cache & Install NPM Packages
      uses: ./.github/custom-actions/npm-action
      with:
        path-of-folder: 'node_modules'

    - name: Check Code Coverage
      continue-on-error: true
      run: npm run coverage

    - name: Archive Test Results
      uses: actions/upload-artifact@v4
      with:
        name: Code-Coverage-Result
        path: coverage
        retention-days: 1
#reporting to s3
  reports-s3:
    needs: [code-coverage, unit-testing]
    name: AWS S3 - Upload Reports
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Download Mocha Test Artifact
        uses: actions/download-artifact@v4
        with:
          name: Mocha-Test-Result-${{ matrix.nodejs_version }}-${{ matrix.operating_system }}-${{ github.run_id }}

      - name: Download Code Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: Code-Coverage-Result

      - name: Merge Test Files
        run: |
          ls -ltr
          mkdir reports-${{ github.sha }}
          mv cobertura-coverage.xml reports-${{ github.sha }}/
          mv test-results.xml reports-${{ github.sha }}/
          ls -ltr reports-${{ github.sha }}/

      - name: Upload to AWS S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args:  --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: solar-system-reports-bucket
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'                       
          SOURCE_DIR: 'reports-${{ github.sha }}'
          DEST_DIR: 'reports-${{ github.sha }}'

  docker:
    name: Containerize Application
    needs: [unit-testing, code-coverage]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Dockerhub Login
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: GHCR Login
      uses: docker/login-action@v2.2.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}


    - name: Docker build for testing
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

    - name: Docker Image Testing
      run: |
        docker images
        docker run --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
        echo $IP

        echo Testing Image URL using wget
        wget -q -O - 127.0.0.1:3000/live | grep live

    - name: Container Registry Push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: | 
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

  update-manifests:
    name: Update Kubernetes Manifests
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Update Image in Development Deployment
        run: |
          sed -i 's|image: .*|image: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}|' solar-system/kubernetes/development/deployment.yaml

      - name: Update Image in Production Deployment
        run: |
          sed -i 's|image: .*|image: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}|' solar-system/kubernetes/production/deployment.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add solar-system/kubernetes/development/deployment.yaml solar-system/kubernetes/production/deployment.yaml
          git commit -m "Update deployment image to ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}"
          git push origin ${{ github.ref_name }}

  # deploy-argocd:
  #   name: Deploy via ArgoCD
  #   needs: update-manifests
  #   runs-on: [self-hosted, linux, prod]
  #   steps:
  #     - name: Login to ArgoCD
  #       run: |
  #         argocd login ${{ secrets.ARGOCD_SERVER }} --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

  #     - name: Sync Development Environment
  #       if: contains(github.ref, 'feature/')
  #       run: |
  #         argocd app sync solar-system-dev --revision ${{ github.sha }}
  #         argocd app wait solar-system-dev --health --timeout 300

  #     - name: Sync Production Environment
  #       if: github.ref == 'refs/heads/main'
  #       run: |
  #         argocd app sync solar-system-prod --revision ${{ github.sha }}
  #         argocd app wait solar-system-prod --health --timeout 300



