name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  NODE_OPTIONS: --no-deprecation

jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nodejs_version: [18, 20]
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
      NODE_OPTIONS: --no-deprecation

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test | tee test-results-${{ matrix.nodejs_version }}.xml

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Results-${{ matrix.nodejs_version }}
          path: test-results-${{ matrix.nodejs_version }}.xml
          if-no-files-found: ignore

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
      NODE_OPTIONS: --no-deprecation

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm ci

      - name: Run Code Coverage
        run: npm run coverage | tee coverage-results.xml

      - name: Archive Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Results
          path: coverage-results.xml
          retention-days: 1

  docker:
    name: Containerize Application
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      NAMESPACE: development
      DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
    secrets:
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    name: Dev Integration Testing
    needs: dev-deploy
    runs-on: [self-hosted, linux, prod] 
    steps:
      - name: Test URL Output using CURL and JQ
        env:
          URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo $URL
          curl https://$URL/live -s -k | jq -r .status | grep -i live

  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      NAMESPACE: production
      DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
    secrets:
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

  prod-integration-testing:
    if: github.ref == 'refs/heads/main'
    name: Prod Integration Testing
    needs: prod-deploy
    runs-on: [self-hosted, linux, prod] 
    steps:
      - name: Test URL Output using CURL and JQ
        env:
          URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo $URL
          curl https://$URL/live -s -k | jq -r .status | grep -i live